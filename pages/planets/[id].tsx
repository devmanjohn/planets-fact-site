import React, { useEffect, useState } from 'react';
import Head from 'next/head';

// components
import Header from '../../components/header/Header';
import Content, { StatCards } from '../../components/planet/Content';
import Controls from '../../components/planet/Controls';
import PlanetGrid from '../../components/PlanetGrid';
import PlanetImage from '../../components/planet/PlanetImage';
import PlanetModel from '../../models/Planet';

export default function Planet({ planetData }: { planetData: PlanetModel }) {
  const [contentToDisplay, setContentToDisplay] = useState<Number>(0);

  // dynamic data to display
  const [contentData, setContentData] = useState(planetData.structure.content);
  const [planetImage, setPlanetImage] = useState(planetData.images.planet);
  const [sourceData, setSourceData] = useState(planetData.structure.source);

  // determine what content to display based on active buttons
  useEffect(() => {
    switch (contentToDisplay) {
      case 0:
        setContentData(planetData.overview.content);
        setSourceData(planetData.overview.source);
        setPlanetImage(planetData.images.planet);
        break;

      case 1:
        setContentData(planetData.structure.content);
        setSourceData(planetData.structure.source);
        setPlanetImage(planetData.images.internal);
        break;

      case 2:
        setContentData(planetData.geology.content);
        setSourceData(planetData.geology.source);
        setPlanetImage(planetData.images.planet);
        break;
    }
  }, [contentToDisplay]);

  // contain stat data for children
  const statData = [
    { title: 'rotation-time', fact: planetData.rotation },
    { title: 'revolution time', fact: planetData.revolution },
    { title: 'radius', fact: planetData.radius },
    { title: 'average temp.', fact: planetData.temperature },
  ];

  // determine screen size so images can be adjusted
  const [currentWidth, setWidth] = useState<Number>(0);
  const [imageSize, setImageSize] = useState<Number>(0);

  useEffect(() => {
    setWidth(window.innerWidth);

    if (currentWidth <= 375) {
      setImageSize(planetData.images.sizes.mobile);
    } else if (currentWidth >= 376 && currentWidth <= 1024) {
      setImageSize(planetData.images.sizes.tablet);
    } else {
      setImageSize(planetData.images.sizes.desktop);
    }
  });

  return (
    <>
      <Head>
        <title>Frontend Mentor | Planets Fact Site</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />
      <main>
        <PlanetGrid>
          <PlanetImage planetImage={planetImage} size={imageSize} />
          <Content
            content={contentData}
            source={sourceData}
            planetName={planetData.name}
          />
          <StatCards data={statData} />
          <Controls setContentToDisplay={setContentToDisplay} />
        </PlanetGrid>
      </main>
    </>
  );
}

export async function getServerSideProps(context: { query: { id: String } }) {
  const res = await fetch('http://localhost:3000/api/planets');
  const data = await res.json();

  if (!context.query.id) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    };
  } else {
    const planetData = await data.find(
      (planet: PlanetModel) =>
        planet.name.toLowerCase() === context.query.id.toLowerCase()
    );

    if (!planetData) {
      return {
        redirect: {
          destination: '/',
          permanent: false,
        },
      };
    }

    return {
      props: { planetData },
    };
  }
}
